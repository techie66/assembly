[SECTION .text]
global main
extern addBCD
extern mulx1
extern mulxn
main:
push ebx

push num1
call getBCD
add esp, 4

push num2
call getBCD
add esp, 4

push num2
push num1
call addBCD
add esp, 8

push num1
call showBCD
add esp, 4

push onedigitprod
push 9
push num2
call mulx1
add esp, 12

push onedigitprod
call showBCD
add esp, 4

push num1
call getBCD
add esp, 4

push num2
call getBCD
add esp, 4

push manydigitprod
push num2
push num1
;call mulxn
add esp, 12

push manydigitprod
call showBCD
add esp, 4

pop ebx
ret


global showBCD
showBCD:
push ebp
mov ebp, esp
push eax
push ebx
push ecx
push edx
push edi
push esi
mov edi, [ebp+8]
mov ecx, 100
mov al, 0
repe scasb
jne notzero
mov ecx, [ebp+8]
add byte [ecx], 30h
mov edx, 1
jmp doprint
notzero:
inc ecx
dec edi
push ecx
push edi

toascii:
add byte [edi], 30h
inc edi
dec ecx
jnz toascii

pop ecx
pop edx 

doprint:
mov eax, 4
mov ebx, 1
int 80h

mov eax, 4
push dword 10
mov ecx, esp
mov edx, 1
int 80h
add esp, 4
 
pop esi
pop edi
pop edx
pop ecx
pop ebx
pop eax
pop ebp
ret

global getBCD
getBCD:
push ebp
mov ebp, esp
push eax
push ebx
push ecx
push edx
push edi
push esi

mov eax, 4
mov ebx, 1
push dword '?'
mov ecx, esp
mov edx, 1
int 80h
add esp, 4

mov eax, 3
mov ebx, 0
mov ecx, [ebp+8]
mov edx, 100
int 80h

dec eax

mov esi, ecx
add esi, eax
dec esi
mov edi, ecx
add edi, 99
mov ecx, eax
std
rep movsb
cld
mov ecx, 100
sub ecx, eax
push eax
mov edi, [ebp+8]
mov al, 0
rep stosb

pop ecx
tonum:
sub byte [edi], 30h
inc edi
dec ecx
jnz tonum

pop esi
pop edi
pop edx
pop ecx
pop ebx
pop eax
pop ebp
ret

[SECTION .bss]
num1 resb 100
num2 resb 100
onedigitprod resb 100
manydigitprod resb 100